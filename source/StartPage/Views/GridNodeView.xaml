<UserControl x:Class="LandingPage.Views.GridNodeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:LandingPage.Views" 
             xmlns:layout="clr-namespace:LandingPage.ViewModels.Layout"
             xmlns:mu="clr-namespace:LandingPage.Markup"
             xmlns:m="clr-namespace:LandingPage.Models.Layout"
             xmlns:conv="clr-namespace:LandingPage.Converters"
             xmlns:numeric="http://gu.se/NumericInput"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800"
             d:DataContext="{d:DesignInstance Type=layout:GridNodeViewModel, IsDesignTimeCreatable=False}"
             Background="Transparent"
             SizeChanged="UserControl_SizeChanged">
    <UserControl.Resources>
        <conv:ThicknessToDoubleConverter x:Key="ThicknessToDoubleConverter"/>
        <conv:DoubleToThicknessConverter x:Key="DoubleToThicknessConverter"/>
        <sys:Boolean x:Key="True">True</sys:Boolean>
        <sys:Boolean x:Key="False">False</sys:Boolean>
        <Style TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource {x:Type GridSplitter}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border Background="Transparent">
                            <Border Margin="0" CornerRadius="2" Background="{TemplateBinding Background}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Opacity" Value="0"/>
            <Setter Property="Visibility" Value="Visible"/>
            <Style.Triggers>
                <DataTrigger Binding="{mu:LandingPageSettings Settings.LockLayout}" Value="{StaticResource True}">
                    <Setter Property="Visibility" Value="Hidden"/>
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding EditModeEnabled}" Value="{StaticResource False}"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}"  Value="{StaticResource True}"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Opacity" Value="0.4"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding EditModeEnabled}" Value="{StaticResource True}">
                    <DataTrigger.Setters>
                        <Setter Property="Visibility" Value="Visible"/>
                        <Setter Property="Opacity" Value="0.9"/>
                    </DataTrigger.Setters>
                </DataTrigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="ContextMenu" BasedOn="{StaticResource {x:Type ContextMenu}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding EditModeEnabled}" Value="{StaticResource False}">
                            <DataTrigger.Setters>

                            </DataTrigger.Setters>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>
    </UserControl.Resources>
    <Grid Name="NodeGrid">
        <Border IsHitTestVisible="False" Visibility="{Binding IsLeaf, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Border Margin="8" CornerRadius="20" Visibility="{Binding GridNode.ViewProperties, Converter={StaticResource NullToVisibilityConverter}}" IsHitTestVisible="False">
                <Border.Style>
                    <Style TargetType="Border">
                        <Style.Resources>
                            <BackEase x:Key="Ease" EasingMode="EaseIn"/>
                        </Style.Resources>
                        <Setter Property="Opacity" Value="0"/>
                        <Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0.75">
                                    <GradientStop Color="#FFFFFFFF"/>
                                    <GradientStop Color="#55FFFFFF" Offset="0.5"/>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="Opacity" Value="0">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsLeaf}" Value="{StaticResource True}"/>
                                    <Condition Binding="{Binding IsLoading}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.20" Duration="0:0:0.5"/>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.20" To="0.4" BeginTime="0:0:0.5" Duration="0:0:1.5" AutoReverse="True" RepeatBehavior="Forever"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiDataTrigger.EnterActions>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsLeaf}" Value="{StaticResource True}"/>
                                    <Condition Binding="{Binding IsLoading}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.6" Duration="0:0:0.15"/>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0" BeginTime="0:0:0.15" Duration="0:0:0.35"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiDataTrigger.EnterActions>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>
        </Border>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock DockPanel.Dock="Top" Text="{Binding GridNode.ViewProperties.StartPageViewArgs.Name}" Margin="5 2 5 5" Style="{DynamicResource BaseTextBlockStyle}" FontWeight="Medium"
                       Visibility="{Binding GridNode.ViewProperties.ShowLabel, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue={x:Static Visibility.Collapsed}}" Grid.Row="0"
                       />
            <ContentControl Content="{Binding View}" x:Name="ViewContentControl" SizeChanged="UserControl_SizeChanged" Grid.Row="1">
                <ContentControl.Style>
                    <Style TargetType="ContentControl">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsLeaf}" Value="{StaticResource True}">
                                <Setter Property="VerticalAlignment" Value="{Binding GridNode.VerticalAlignment}"/>
                                <Setter Property="HorizontalAlignment" Value="{Binding GridNode.HorizontalAlignment}"/>
                                <Setter Property="Margin" Value="{Binding GridNode.Padding}"/>
                                <Setter Property="Opacity" Value="0"/>
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsLeaf}" Value="{StaticResource True}"/>
                                    <Condition Binding="{Binding EditModeEnabled}" Value="{StaticResource True}"/>
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="Opacity" Value="0.65"/>
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsLeaf}" Value="{StaticResource True}"/>
                                    <Condition Binding="{Binding IsLoading}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.5"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </MultiDataTrigger.EnterActions>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </ContentControl.Style>
            </ContentControl>
        </Grid>
        
        <Grid Visibility="{Binding IsLeaf, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Border x:Name="EditPanel" CornerRadius="0" Margin="0" Background="Transparent" Visibility="{Binding EditModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                    Opacity="1"
                    AllowDrop="True" 
                    DragEnter="Border_PreviewDragEnter" 
                    DragLeave="Border_PreviewDragLeave"
                    MouseMove="Border_PreviewMouseMove"
                    Cursor="SizeAll">
                <Border.ContextMenu>
                    <ContextMenu>
                        <MenuItem>
                            <MenuItem.Header>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Text="{DynamicResource LOC_SPG_ShowViewLabel}" Grid.Column="0"/>
                                    <CheckBox IsChecked="{Binding GridNode.ViewProperties.ShowLabel}" Grid.Column="1" Margin="5 0"/>
                                </Grid>
                            </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Header="{DynamicResource LOC_SPG_SplitHorizonatlly}" Command="{Binding SplitHorizontallyCommand}"/>
                        <MenuItem Header="{DynamicResource LOC_SPG_SplitVertically}" Command="{Binding SplitVerticallyCommand}"/>
                        <Separator/>
                        <MenuItem Header="{DynamicResource LOC_SPG_MergeWith}" IsEnabled="{Binding Parent, Converter={StaticResource NullToBoolConverter}}">
                            <MenuItem Command="{Binding MergeWithPreviousPanelCommand}">
                                <MenuItem.Style>
                                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Setter Property="Header" Value="{DynamicResource LOC_SPG_MergeWithAbove}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Parent.GridNode.Orientation}" Value="{x:Static Orientation.Horizontal}">
                                                <Setter Property="Header" Value="{DynamicResource LOC_SPG_MergeWithLeft}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </MenuItem.Style>
                            </MenuItem>
                            <MenuItem Command="{Binding MergeWithNextPanelCommand}">
                                <MenuItem.Style>
                                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                        <Setter Property="Header" Value="{DynamicResource LOC_SPG_MergeWithBelow}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Parent.GridNode.Orientation}" Value="{x:Static Orientation.Horizontal}">
                                                <Setter Property="Header" Value="{DynamicResource LOC_SPG_MergeWithRight}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </MenuItem.Style>
                            </MenuItem>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="{DynamicResource LOC_SPG_VerticalAlignment}" IsEnabled="{Binding IsLeaf}">
                            <MenuItem Header="{DynamicResource LOC_SPG_AlignmentStretch}" Command="{Binding SetVerticalAlignmentCommand}" CommandParameter="{x:Static VerticalAlignment.Stretch}"
                                      IsEnabled="{Binding GridNode.VerticalAlignment, Converter={StaticResource InvertedObjectEqualityToBoolConverter}, ConverterParameter={x:Static VerticalAlignment.Stretch}}"/>
                            <MenuItem Header="{DynamicResource LOC_SPG_VerticalAlignmentTop}" Command="{Binding SetVerticalAlignmentCommand}" CommandParameter="{x:Static VerticalAlignment.Top}"
                                      IsEnabled="{Binding GridNode.VerticalAlignment, Converter={StaticResource InvertedObjectEqualityToBoolConverter}, ConverterParameter={x:Static VerticalAlignment.Top}}"/>
                            <MenuItem Header="{DynamicResource LOC_SPG_AlignmentCenter}" Command="{Binding SetVerticalAlignmentCommand}" CommandParameter="{x:Static VerticalAlignment.Center}"
                                      IsEnabled="{Binding GridNode.VerticalAlignment, Converter={StaticResource InvertedObjectEqualityToBoolConverter}, ConverterParameter={x:Static VerticalAlignment.Center}}"/>
                            <MenuItem Header="{DynamicResource LOC_SPG_VerticalAlignmentBottom}" Command="{Binding SetVerticalAlignmentCommand}" CommandParameter="{x:Static VerticalAlignment.Bottom}"
                                      IsEnabled="{Binding GridNode.VerticalAlignment, Converter={StaticResource InvertedObjectEqualityToBoolConverter}, ConverterParameter={x:Static VerticalAlignment.Bottom}}"/>
                        </MenuItem>
                        <MenuItem Header="{DynamicResource LOC_SPG_HorizontalAlignment}" IsEnabled="{Binding IsLeaf}">
                            <MenuItem Header="{DynamicResource LOC_SPG_AlignmentStretch}" Command="{Binding SetHorizontalAlignmentCommand}" CommandParameter="{x:Static HorizontalAlignment.Stretch}"
                                      IsEnabled="{Binding GridNode.HorizontalAlignment, Converter={StaticResource InvertedObjectEqualityToBoolConverter}, ConverterParameter={x:Static HorizontalAlignment.Stretch}}"/>
                            <MenuItem Header="{DynamicResource LOC_SPG_HorizontalAlignmentLeft}" Command="{Binding SetHorizontalAlignmentCommand}" CommandParameter="{x:Static HorizontalAlignment.Left}"
                                      IsEnabled="{Binding GridNode.HorizontalAlignment, Converter={StaticResource InvertedObjectEqualityToBoolConverter}, ConverterParameter={x:Static HorizontalAlignment.Left}}"/>
                            <MenuItem Header="{DynamicResource LOC_SPG_AlignmentCenter}" Command="{Binding SetHorizontalAlignmentCommand}" CommandParameter="{x:Static HorizontalAlignment.Center}"
                                      IsEnabled="{Binding GridNode.HorizontalAlignment, Converter={StaticResource InvertedObjectEqualityToBoolConverter}, ConverterParameter={x:Static HorizontalAlignment.Center}}"/>
                            <MenuItem Header="{DynamicResource LOC_SPG_HorizontalAlignmentRight}" Command="{Binding SetHorizontalAlignmentCommand}" CommandParameter="{x:Static HorizontalAlignment.Right}"
                                      IsEnabled="{Binding GridNode.HorizontalAlignment, Converter={StaticResource InvertedObjectEqualityToBoolConverter}, ConverterParameter={x:Static HorizontalAlignment.Right}}"/>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="{DynamicResource LOC_SPG_Padding}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition SharedSizeGroup="Value"/>
                                    <ColumnDefinition SharedSizeGroup="ValueText"/>
                                </Grid.ColumnDefinitions>
                                <Slider Grid.Column="0" Value="{Binding GridNode.Padding}" Minimum="0" Maximum="100" Width="100" VerticalAlignment="Center" 
                                                        IsSnapToTickEnabled="True" TickFrequency="1" SmallChange="1"/>
                                <numeric:DoubleBox Grid.Column="1" Value="{Binding GridNode.Padding, UpdateSourceTrigger=PropertyChanged}" Margin="10,0,0,0"
                                                    MinValue="0"
                                                    MinWidth="20"
                                                    ValidationTrigger="PropertyChanged"
                                                    Style="{StaticResource {x:Type TextBox}}"
                                                    TextAlignment="Center"
                                                    Padding="5,0">
                                </numeric:DoubleBox>
                            </Grid>
                        </MenuItem>

                        <Separator/>
                        <MenuItem Header="{DynamicResource LOC_SPG_RemovePanel}" Command="{Binding RemovePanelCommand}"/>
                    </ContextMenu>
                </Border.ContextMenu>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Border Grid.RowSpan="2" Margin="8" CornerRadius="20" IsHitTestVisible="False">
                        <Border.Background>
                            <SolidColorBrush Color="White" Opacity="0.2"/>
                        </Border.Background>
                    </Border>
                    <Button HorizontalAlignment="Center" Width="8" Margin="5" Background="White" BorderBrush="Transparent" Opacity="0.2" Command="{Binding SplitHorizontallyCommand}"
                            Visibility="{Binding ElementName=EditPanel, Path=IsMouseOver, Converter={StaticResource BooleanToVisibilityConverter}}"
                            ToolTip="{DynamicResource LOC_SPG_SplitHorizonatlly}"
                            Cursor="Hand"
                            Grid.RowSpan="2"/>
                    <Button VerticalAlignment="Center" Height="8" Margin="5"  Background="White" BorderBrush="Transparent" Opacity="0.2" Command="{Binding SplitVerticallyCommand}"
                            Visibility="{Binding ElementName=EditPanel, Path=IsMouseOver, Converter={StaticResource BooleanToVisibilityConverter}}"
                            ToolTip="{DynamicResource LOC_SPG_SplitVertically}"
                            Cursor="Hand"
                            Grid.RowSpan="2"/>
                    <Button Content="{DynamicResource LOC_SPG_RemoveView}" Command="{Binding RemoveViewCommand}" Margin="5" HorizontalAlignment="Center" VerticalAlignment="Center" Padding="5"
                            Visibility="{Binding GridNode.ViewProperties, Converter={StaticResource NullToVisibilityConverter}}"
                            Cursor="Hand"
                            Grid.Row="1"/>
                    <Menu HorizontalAlignment="Center" VerticalAlignment="Center" Cursor="Arrow"
                          Grid.RowSpan="2">
                        <Menu.Style>
                            <Style TargetType="Menu" BasedOn="{StaticResource {x:Type Menu}}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="Menu">
                                            <Border Background="{DynamicResource ButtonBackgroundBrush}" CornerRadius="5">
                                                <StackPanel IsItemsHost="True" Orientation="Vertical"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Menu.Style>
                        <MenuItem>
                            <MenuItem.Style>
                                <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                    <Setter Property="Header" Value="{DynamicResource LOC_SPG_AddView}"/>
                                    <Setter Property="ItemsSource" Value="{Binding AvailableViews}"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsSubmenuOpen" Value="True">
                                            <Setter Property="ItemsSource" Value="{Binding AvailableViews}"/>
                                        </Trigger>
                                        <DataTrigger Binding="{Binding GridNode.ViewProperties.StartPageViewArgs.Name, Converter={StaticResource StringNullOrEmptyToBoolConverter}}" Value="{StaticResource True}">
                                            <Setter Property="Header" Value="{Binding GridNode.ViewProperties.StartPageViewArgs.Name}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </MenuItem.Style>
                            <MenuItem.ItemContainerStyle>
                                <Style TargetType="MenuItem">
                                    <Setter Property="Header" Value="{Binding Key}"/>
                                    <Setter Property="ItemsSource" Value="{Binding Value}"/>
                                    <Setter Property="ItemContainerStyle">
                                        <Setter.Value>
                                            <Style TargetType="MenuItem">
                                                <Setter Property="Header" Value="{Binding ViewArgs.Name}"/>
                                                <Setter Property="CommandParameter" Value="{Binding .}"/>
                                                <Setter Property="Command" Value="{Binding AddCommand}"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ViewArgs.Description, Converter={StaticResource StringNullOrEmptyToBoolConverter}}" Value="{StaticResource True}">
                                                        <Setter Property="ToolTip">
                                                            <Setter.Value>
                                                                <TextBlock Text="{Binding ViewArgs.Description}"/>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </MenuItem.ItemContainerStyle>
                        </MenuItem>
                    </Menu>
                    <Grid HorizontalAlignment="Right" VerticalAlignment="Top"
                          Visibility="Visible"
                          Grid.RowSpan="2">
                        <ToggleButton x:Name="SettingsButton"
                                      BorderBrush="Transparent"
                                      BorderThickness="0"
                                      Background="Transparent"
                                      Padding="1"
                                      Cursor="Hand"
                                      Margin="5"
                                      Visibility="{Binding GridNode.ViewProperties.StartPageViewArgs.HasSettings, FallbackValue={x:Static Visibility.Hidden}, TargetNullValue={x:Static Visibility.Hidden}, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <ToggleButton.Content>
                                <TextBlock Text="&#xefb0;" FontFamily="{StaticResource FontIcoFont}" FontSize="22"/>
                            </ToggleButton.Content>
                        </ToggleButton>
                        <Popup x:Name="SettingsPopup" PlacementTarget="{Binding ElementName=SettingsButton}" Placement="Left"
                           StaysOpen="False" IsOpen="{Binding ElementName=SettingsButton, Path=IsChecked, Delay=100}">
                            <Popup.Style>
                                <Style TargetType="Popup" BasedOn="{StaticResource {x:Type Popup}}">
                                    <Style.Triggers>
                                        <Trigger Property="IsOpen" Value="True">
                                            <Setter Property="Child">
                                                <Setter.Value>
                                                    <Border Background="{DynamicResource PopupBackgroundBrush}" Padding="10" CornerRadius="10">
                                                        <ScrollViewer Content="{Binding ViewSettings}" MaxWidth="800" MaxHeight="600"/>
                                                    </Border>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Style>
                        </Popup>
                    </Grid>
                </Grid>
            </Border>
        </Grid>
        
    </Grid>

    
</UserControl>
